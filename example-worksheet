;; gorilla-repl.fileformat = 1

;; **
;;; # leaflet-gorilla
;;; 
;;; leaflet-gorilla is a renderer for Gorilla REPL that lets you put data on maps using the [Leaflet](http://leafletjs.com/) javascript library.
;;; 
;;; ## Setup
;;; 
;;; First create the namespace and require the leaflet-gorilla code:
;; **

;; @@
(ns gentle-shelter
  (:require
   [com.lemondronor.leaflet-gorilla :as lg]))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; **
;;; ## API function: leaflet
;;; 
;;; There is one function you need to use to plot data on maps: `leaflet`.  It takes geometries as arguments, where a geometry is a sequence of lat/long coordinates tagged with how you want them to be displayed on the map.  As an example, here's a geometry that describes 3 points:
;;; 
;;; ```
;;; [:points [[35.059444 -118.151667]
;;;           [34.5975 -117.383056]
;;;           [33.9425, -118.408056]]]
;;; ```
;;; 
;;; Besides points, leaflet-gorilla also supports lines and polygons.
;;; 
;;; ## Examples
;;; 
;;; First we'll define some points to use in our examples:
;; **

;; @@
(def points [[35.059444 -118.151667]
             [34.5975 -117.383056]
             [33.9425, -118.408056]
             [34.200556 -118.358611]])
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;gentle-shelter/points</span>","value":"#'gentle-shelter/points"}
;; <=

;; **
;;; Plot the points on a map (note that if you don't tag a geometry, it is interpreted as a set of points):
;; **

;; @@
(lg/leaflet points)
;; @@
;; =>
;;; {"type":"html","content":"<div>\n<div id='2a7f18f8-f9be-4f34-8b0a-e80d90640c9c' style='height: 400px; width: 400px;'></div>\n<script type='text/javascript'>\n$(function () {\n  var cachedScript = function(url, options) {\n    // Allow user to set any option except for dataType, cache, and url\n    options = $.extend( options || {}, {\n      dataType: 'script',\n      cache: true,\n      url: url\n    });\n\n    // Use $.ajax() since it is more flexible than $.getScript\n    // Return the jqXHR object so we can chain callbacks\n    return jQuery.ajax(options);\n  };\n  var createMap = function() {\n    console.log('Running createMap for 2a7f18f8-f9be-4f34-8b0a-e80d90640c9c');\n    var map = L.map('2a7f18f8-f9be-4f34-8b0a-e80d90640c9c')\n    console.log('createMap ran for 2a7f18f8-f9be-4f34-8b0a-e80d90640c9c');\n    L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png')\n        .addTo(map);\n    var geoJson = L.geoJson(\n      {\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPoint\",\"coordinates\":[[-118.151667,35.059444],[-117.383056,34.5975],[-118.408056,33.9425],[-118.358611,34.200556]]}}]},\n      {style: {'color': 'steelblue',\n               'opacity': 1.0}});\n    geoJson.addTo(map);\n    if (null) {\n      map.setView.apply(map, null);\n    } else {\n      map.fitBounds(geoJson.getBounds());\n    }\n  };\n  if (!document.getElementById('leaflet-css')) {\n    console.log('Adding css for 2a7f18f8-f9be-4f34-8b0a-e80d90640c9c');\n    $('<link>')\n      .attr('rel', 'stylesheet')\n      .attr('href', 'http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css')\n      .attr('id', 'leaflet-css')\n      .appendTo('head');\n  }\n  if (!window.leafletJsLoaded) {\n    if (!window.leafletJsIsLoading) {\n      console.log('Adding js for 2a7f18f8-f9be-4f34-8b0a-e80d90640c9c');\n      window.leafletJsLoadedCallbacks = [createMap];\n      window.leafletJsIsLoading = true;\n      cachedScript('http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js')\n        .done(function() {\n          console.log('js loaded');\n          console.log('callbacks: ' + window.leafletJsLoadedCallbacks);\n          window.leafletJsIsLoading = false;\n          window.leafletJsLoaded = true;\n          _.each(window.leafletJsLoadedCallbacks, function(cb) { cb(); });\n          window.leafletJsLoadedCallbacks = [];\n        })\n        .fail(function() { console.log('failed'); });\n    } else {\n      console.log('Adding callback for 2a7f18f8-f9be-4f34-8b0a-e80d90640c9c');\n      window.leafletJsLoadedCallbacks.push(createMap);\n    }\n  } else {\n    console.log('Calling createMap directly for 2a7f18f8-f9be-4f34-8b0a-e80d90640c9c');\n    createMap();\n  }\n});\n</script>\n</div>","value":"#com.lemondronor.leaflet_gorilla.LeafletView{:geometries [[[35.059444 -118.151667] [34.5975 -117.383056] [33.9425 -118.408056] [34.200556 -118.358611]]], :opts {}}"}
;; <=

;; **
;;; Now plot the line containing the points:
;; **

;; @@
(lg/leaflet [:line points])
;; @@
;; =>
;;; {"type":"html","content":"<div>\n<div id='3e4945ef-ee68-4a60-a710-e1b679cc45fa' style='height: 400px; width: 400px;'></div>\n<script type='text/javascript'>\n$(function () {\n  var cachedScript = function(url, options) {\n    // Allow user to set any option except for dataType, cache, and url\n    options = $.extend( options || {}, {\n      dataType: 'script',\n      cache: true,\n      url: url\n    });\n\n    // Use $.ajax() since it is more flexible than $.getScript\n    // Return the jqXHR object so we can chain callbacks\n    return jQuery.ajax(options);\n  };\n  var createMap = function() {\n    console.log('Running createMap for 3e4945ef-ee68-4a60-a710-e1b679cc45fa');\n    var map = L.map('3e4945ef-ee68-4a60-a710-e1b679cc45fa')\n    console.log('createMap ran for 3e4945ef-ee68-4a60-a710-e1b679cc45fa');\n    L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png')\n        .addTo(map);\n    var geoJson = L.geoJson(\n      {\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[-118.151667,35.059444],[-117.383056,34.5975],[-118.408056,33.9425],[-118.358611,34.200556]]}}]},\n      {style: {'color': 'steelblue',\n               'opacity': 1.0}});\n    geoJson.addTo(map);\n    if (null) {\n      map.setView.apply(map, null);\n    } else {\n      map.fitBounds(geoJson.getBounds());\n    }\n  };\n  if (!document.getElementById('leaflet-css')) {\n    console.log('Adding css for 3e4945ef-ee68-4a60-a710-e1b679cc45fa');\n    $('<link>')\n      .attr('rel', 'stylesheet')\n      .attr('href', 'http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css')\n      .attr('id', 'leaflet-css')\n      .appendTo('head');\n  }\n  if (!window.leafletJsLoaded) {\n    if (!window.leafletJsIsLoading) {\n      console.log('Adding js for 3e4945ef-ee68-4a60-a710-e1b679cc45fa');\n      window.leafletJsLoadedCallbacks = [createMap];\n      window.leafletJsIsLoading = true;\n      cachedScript('http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js')\n        .done(function() {\n          console.log('js loaded');\n          console.log('callbacks: ' + window.leafletJsLoadedCallbacks);\n          window.leafletJsIsLoading = false;\n          window.leafletJsLoaded = true;\n          _.each(window.leafletJsLoadedCallbacks, function(cb) { cb(); });\n          window.leafletJsLoadedCallbacks = [];\n        })\n        .fail(function() { console.log('failed'); });\n    } else {\n      console.log('Adding callback for 3e4945ef-ee68-4a60-a710-e1b679cc45fa');\n      window.leafletJsLoadedCallbacks.push(createMap);\n    }\n  } else {\n    console.log('Calling createMap directly for 3e4945ef-ee68-4a60-a710-e1b679cc45fa');\n    createMap();\n  }\n});\n</script>\n</div>","value":"#com.lemondronor.leaflet_gorilla.LeafletView{:geometries [[:line [[35.059444 -118.151667] [34.5975 -117.383056] [33.9425 -118.408056] [34.200556 -118.358611]]]], :opts {}}"}
;; <=

;; **
;;; Next we'll plot a polygon containing the points.  Note that polygons are defined by lists of lines; The first list is the exterior ring and and others are interior rings or holes.  So we wrap our points in another vector:
;; **

;; @@
(lg/leaflet [:polygon [points]])
;; @@
;; =>
;;; {"type":"html","content":"<div>\n<div id='d1097a0f-f406-44e1-8658-8343d2df9f7f' style='height: 400px; width: 400px;'></div>\n<script type='text/javascript'>\n$(function () {\n  var cachedScript = function(url, options) {\n    // Allow user to set any option except for dataType, cache, and url\n    options = $.extend( options || {}, {\n      dataType: 'script',\n      cache: true,\n      url: url\n    });\n\n    // Use $.ajax() since it is more flexible than $.getScript\n    // Return the jqXHR object so we can chain callbacks\n    return jQuery.ajax(options);\n  };\n  var createMap = function() {\n    console.log('Running createMap for d1097a0f-f406-44e1-8658-8343d2df9f7f');\n    var map = L.map('d1097a0f-f406-44e1-8658-8343d2df9f7f')\n    console.log('createMap ran for d1097a0f-f406-44e1-8658-8343d2df9f7f');\n    L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png')\n        .addTo(map);\n    var geoJson = L.geoJson(\n      {\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-118.151667,35.059444],[-117.383056,34.5975],[-118.408056,33.9425],[-118.358611,34.200556]]]}}]},\n      {style: {'color': 'steelblue',\n               'opacity': 1.0}});\n    geoJson.addTo(map);\n    if (null) {\n      map.setView.apply(map, null);\n    } else {\n      map.fitBounds(geoJson.getBounds());\n    }\n  };\n  if (!document.getElementById('leaflet-css')) {\n    console.log('Adding css for d1097a0f-f406-44e1-8658-8343d2df9f7f');\n    $('<link>')\n      .attr('rel', 'stylesheet')\n      .attr('href', 'http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css')\n      .attr('id', 'leaflet-css')\n      .appendTo('head');\n  }\n  if (!window.leafletJsLoaded) {\n    if (!window.leafletJsIsLoading) {\n      console.log('Adding js for d1097a0f-f406-44e1-8658-8343d2df9f7f');\n      window.leafletJsLoadedCallbacks = [createMap];\n      window.leafletJsIsLoading = true;\n      cachedScript('http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js')\n        .done(function() {\n          console.log('js loaded');\n          console.log('callbacks: ' + window.leafletJsLoadedCallbacks);\n          window.leafletJsIsLoading = false;\n          window.leafletJsLoaded = true;\n          _.each(window.leafletJsLoadedCallbacks, function(cb) { cb(); });\n          window.leafletJsLoadedCallbacks = [];\n        })\n        .fail(function() { console.log('failed'); });\n    } else {\n      console.log('Adding callback for d1097a0f-f406-44e1-8658-8343d2df9f7f');\n      window.leafletJsLoadedCallbacks.push(createMap);\n    }\n  } else {\n    console.log('Calling createMap directly for d1097a0f-f406-44e1-8658-8343d2df9f7f');\n    createMap();\n  }\n});\n</script>\n</div>","value":"#com.lemondronor.leaflet_gorilla.LeafletView{:geometries [[:polygon [[[35.059444 -118.151667] [34.5975 -117.383056] [33.9425 -118.408056] [34.200556 -118.358611]]]]], :opts {}}"}
;; <=

;; **
;;; Here's an example of putting a hole in the polygon:
;; **

;; @@
(def hole [[34.6 -118.15] [34.7 -117.8] [34.35 -118.15]])
(lg/leaflet [:polygon [points hole]])
;; @@
;; =>
;;; {"type":"html","content":"<div>\n<div id='52a65365-94bc-4347-9ab2-7be860d6457c' style='height: 400px; width: 400px;'></div>\n<script type='text/javascript'>\n$(function () {\n  var cachedScript = function(url, options) {\n    // Allow user to set any option except for dataType, cache, and url\n    options = $.extend( options || {}, {\n      dataType: 'script',\n      cache: true,\n      url: url\n    });\n\n    // Use $.ajax() since it is more flexible than $.getScript\n    // Return the jqXHR object so we can chain callbacks\n    return jQuery.ajax(options);\n  };\n  var createMap = function() {\n    console.log('Running createMap for 52a65365-94bc-4347-9ab2-7be860d6457c');\n    var map = L.map('52a65365-94bc-4347-9ab2-7be860d6457c')\n    console.log('createMap ran for 52a65365-94bc-4347-9ab2-7be860d6457c');\n    L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png')\n        .addTo(map);\n    var geoJson = L.geoJson(\n      {\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-118.151667,35.059444],[-117.383056,34.5975],[-118.408056,33.9425],[-118.358611,34.200556]],[[-118.15,34.6],[-117.8,34.7],[-118.15,34.35]]]}}]},\n      {style: {'color': 'steelblue',\n               'opacity': 1.0}});\n    geoJson.addTo(map);\n    if (null) {\n      map.setView.apply(map, null);\n    } else {\n      map.fitBounds(geoJson.getBounds());\n    }\n  };\n  if (!document.getElementById('leaflet-css')) {\n    console.log('Adding css for 52a65365-94bc-4347-9ab2-7be860d6457c');\n    $('<link>')\n      .attr('rel', 'stylesheet')\n      .attr('href', 'http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css')\n      .attr('id', 'leaflet-css')\n      .appendTo('head');\n  }\n  if (!window.leafletJsLoaded) {\n    if (!window.leafletJsIsLoading) {\n      console.log('Adding js for 52a65365-94bc-4347-9ab2-7be860d6457c');\n      window.leafletJsLoadedCallbacks = [createMap];\n      window.leafletJsIsLoading = true;\n      cachedScript('http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js')\n        .done(function() {\n          console.log('js loaded');\n          console.log('callbacks: ' + window.leafletJsLoadedCallbacks);\n          window.leafletJsIsLoading = false;\n          window.leafletJsLoaded = true;\n          _.each(window.leafletJsLoadedCallbacks, function(cb) { cb(); });\n          window.leafletJsLoadedCallbacks = [];\n        })\n        .fail(function() { console.log('failed'); });\n    } else {\n      console.log('Adding callback for 52a65365-94bc-4347-9ab2-7be860d6457c');\n      window.leafletJsLoadedCallbacks.push(createMap);\n    }\n  } else {\n    console.log('Calling createMap directly for 52a65365-94bc-4347-9ab2-7be860d6457c');\n    createMap();\n  }\n});\n</script>\n</div>","value":"#com.lemondronor.leaflet_gorilla.LeafletView{:geometries [[:polygon [[[35.059444 -118.151667] [34.5975 -117.383056] [33.9425 -118.408056] [34.200556 -118.358611]] [[34.6 -118.15] [34.7 -117.8] [34.35 -118.15]]]]], :opts {}}"}
;; <=

;; **
;;; You can combine geometries on a single map:
;; **

;; @@
(lg/leaflet [:polygon [points [[34.6 -118.15] [34.7 -117.8] [34.35 -118.15]]]]
            [:points points]
            [:points hole]
            [:line [[34.62 -119] [34 -117]]])
;; @@
;; =>
;;; {"type":"html","content":"<div>\n<div id='47ad4776-cd7a-4911-b518-21d6c7fe0f92' style='height: 400px; width: 400px;'></div>\n<script type='text/javascript'>\n$(function () {\n  var cachedScript = function(url, options) {\n    // Allow user to set any option except for dataType, cache, and url\n    options = $.extend( options || {}, {\n      dataType: 'script',\n      cache: true,\n      url: url\n    });\n\n    // Use $.ajax() since it is more flexible than $.getScript\n    // Return the jqXHR object so we can chain callbacks\n    return jQuery.ajax(options);\n  };\n  var createMap = function() {\n    console.log('Running createMap for 47ad4776-cd7a-4911-b518-21d6c7fe0f92');\n    var map = L.map('47ad4776-cd7a-4911-b518-21d6c7fe0f92')\n    console.log('createMap ran for 47ad4776-cd7a-4911-b518-21d6c7fe0f92');\n    L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png')\n        .addTo(map);\n    var geoJson = L.geoJson(\n      {\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[-118.151667,35.059444],[-117.383056,34.5975],[-118.408056,33.9425],[-118.358611,34.200556]],[[-118.15,34.6],[-117.8,34.7],[-118.15,34.35]]]}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPoint\",\"coordinates\":[[-118.151667,35.059444],[-117.383056,34.5975],[-118.408056,33.9425],[-118.358611,34.200556]]}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPoint\",\"coordinates\":[[-118.15,34.6],[-117.8,34.7],[-118.15,34.35]]}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[-119,34.62],[-117,34]]}}]},\n      {style: {'color': 'steelblue',\n               'opacity': 1.0}});\n    geoJson.addTo(map);\n    if (null) {\n      map.setView.apply(map, null);\n    } else {\n      map.fitBounds(geoJson.getBounds());\n    }\n  };\n  if (!document.getElementById('leaflet-css')) {\n    console.log('Adding css for 47ad4776-cd7a-4911-b518-21d6c7fe0f92');\n    $('<link>')\n      .attr('rel', 'stylesheet')\n      .attr('href', 'http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css')\n      .attr('id', 'leaflet-css')\n      .appendTo('head');\n  }\n  if (!window.leafletJsLoaded) {\n    if (!window.leafletJsIsLoading) {\n      console.log('Adding js for 47ad4776-cd7a-4911-b518-21d6c7fe0f92');\n      window.leafletJsLoadedCallbacks = [createMap];\n      window.leafletJsIsLoading = true;\n      cachedScript('http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js')\n        .done(function() {\n          console.log('js loaded');\n          console.log('callbacks: ' + window.leafletJsLoadedCallbacks);\n          window.leafletJsIsLoading = false;\n          window.leafletJsLoaded = true;\n          _.each(window.leafletJsLoadedCallbacks, function(cb) { cb(); });\n          window.leafletJsLoadedCallbacks = [];\n        })\n        .fail(function() { console.log('failed'); });\n    } else {\n      console.log('Adding callback for 47ad4776-cd7a-4911-b518-21d6c7fe0f92');\n      window.leafletJsLoadedCallbacks.push(createMap);\n    }\n  } else {\n    console.log('Calling createMap directly for 47ad4776-cd7a-4911-b518-21d6c7fe0f92');\n    createMap();\n  }\n});\n</script>\n</div>","value":"#com.lemondronor.leaflet_gorilla.LeafletView{:geometries [[:polygon [[[35.059444 -118.151667] [34.5975 -117.383056] [33.9425 -118.408056] [34.200556 -118.358611]] [[34.6 -118.15] [34.7 -117.8] [34.35 -118.15]]]] [:points [[35.059444 -118.151667] [34.5975 -117.383056] [33.9425 -118.408056] [34.200556 -118.358611]]] [:points [[34.6 -118.15] [34.7 -117.8] [34.35 -118.15]]] [:line [[34.62 -119] [34 -117]]]], :opts {}}"}
;; <=

;; **
;;; ## Options
;;; 
;;; You can also pass some options to `leaflet`.  The available options are `:width`, `:height`, `:view`, `:color`, `:opacity`, and `:tile-layer-url`.
;;; 
;;; `:width` and `:height` change the size of the map:
;; **

;; @@
(lg/leaflet points :width 600 :height 450)
;; @@
;; =>
;;; {"type":"html","content":"<div>\n<div id='3cf1bf8d-c577-4341-ad89-824fad6bae2c' style='height: 450px; width: 600px;'></div>\n<script type='text/javascript'>\n$(function () {\n  var cachedScript = function(url, options) {\n    // Allow user to set any option except for dataType, cache, and url\n    options = $.extend( options || {}, {\n      dataType: 'script',\n      cache: true,\n      url: url\n    });\n\n    // Use $.ajax() since it is more flexible than $.getScript\n    // Return the jqXHR object so we can chain callbacks\n    return jQuery.ajax(options);\n  };\n  var createMap = function() {\n    console.log('Running createMap for 3cf1bf8d-c577-4341-ad89-824fad6bae2c');\n    var map = L.map('3cf1bf8d-c577-4341-ad89-824fad6bae2c')\n    console.log('createMap ran for 3cf1bf8d-c577-4341-ad89-824fad6bae2c');\n    L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png')\n        .addTo(map);\n    var geoJson = L.geoJson(\n      {\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPoint\",\"coordinates\":[[-118.151667,35.059444],[-117.383056,34.5975],[-118.408056,33.9425],[-118.358611,34.200556]]}}]},\n      {style: {'color': 'steelblue',\n               'opacity': 1.0}});\n    geoJson.addTo(map);\n    if (null) {\n      map.setView.apply(map, null);\n    } else {\n      map.fitBounds(geoJson.getBounds());\n    }\n  };\n  if (!document.getElementById('leaflet-css')) {\n    console.log('Adding css for 3cf1bf8d-c577-4341-ad89-824fad6bae2c');\n    $('<link>')\n      .attr('rel', 'stylesheet')\n      .attr('href', 'http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css')\n      .attr('id', 'leaflet-css')\n      .appendTo('head');\n  }\n  if (!window.leafletJsLoaded) {\n    if (!window.leafletJsIsLoading) {\n      console.log('Adding js for 3cf1bf8d-c577-4341-ad89-824fad6bae2c');\n      window.leafletJsLoadedCallbacks = [createMap];\n      window.leafletJsIsLoading = true;\n      cachedScript('http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js')\n        .done(function() {\n          console.log('js loaded');\n          console.log('callbacks: ' + window.leafletJsLoadedCallbacks);\n          window.leafletJsIsLoading = false;\n          window.leafletJsLoaded = true;\n          _.each(window.leafletJsLoadedCallbacks, function(cb) { cb(); });\n          window.leafletJsLoadedCallbacks = [];\n        })\n        .fail(function() { console.log('failed'); });\n    } else {\n      console.log('Adding callback for 3cf1bf8d-c577-4341-ad89-824fad6bae2c');\n      window.leafletJsLoadedCallbacks.push(createMap);\n    }\n  } else {\n    console.log('Calling createMap directly for 3cf1bf8d-c577-4341-ad89-824fad6bae2c');\n    createMap();\n  }\n});\n</script>\n</div>","value":"#com.lemondronor.leaflet_gorilla.LeafletView{:geometries [[[35.059444 -118.151667] [34.5975 -117.383056] [33.9425 -118.408056] [34.200556 -118.358611]]], :opts {:height 450, :width 600}}"}
;; <=

;; **
;;; `:view` is used to center the map on specific coordinates, and set its zoom level.  If you don't specify `:view`, leaflet will fit the map to the geometries.
;; **

;; @@
(lg/leaflet points :view [[34.5975 -117.383056] 7])
;; @@
;; =>
;;; {"type":"html","content":"<div>\n<div id='123b280e-4b94-40de-a0d5-b4fe2e3810ba' style='height: 400px; width: 400px;'></div>\n<script type='text/javascript'>\n$(function () {\n  var cachedScript = function(url, options) {\n    // Allow user to set any option except for dataType, cache, and url\n    options = $.extend( options || {}, {\n      dataType: 'script',\n      cache: true,\n      url: url\n    });\n\n    // Use $.ajax() since it is more flexible than $.getScript\n    // Return the jqXHR object so we can chain callbacks\n    return jQuery.ajax(options);\n  };\n  var createMap = function() {\n    console.log('Running createMap for 123b280e-4b94-40de-a0d5-b4fe2e3810ba');\n    var map = L.map('123b280e-4b94-40de-a0d5-b4fe2e3810ba')\n    console.log('createMap ran for 123b280e-4b94-40de-a0d5-b4fe2e3810ba');\n    L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png')\n        .addTo(map);\n    var geoJson = L.geoJson(\n      {\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPoint\",\"coordinates\":[[-118.151667,35.059444],[-117.383056,34.5975],[-118.408056,33.9425],[-118.358611,34.200556]]}}]},\n      {style: {'color': 'steelblue',\n               'opacity': 1.0}});\n    geoJson.addTo(map);\n    if ([[34.5975,-117.383056],7]) {\n      map.setView.apply(map, [[34.5975,-117.383056],7]);\n    } else {\n      map.fitBounds(geoJson.getBounds());\n    }\n  };\n  if (!document.getElementById('leaflet-css')) {\n    console.log('Adding css for 123b280e-4b94-40de-a0d5-b4fe2e3810ba');\n    $('<link>')\n      .attr('rel', 'stylesheet')\n      .attr('href', 'http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css')\n      .attr('id', 'leaflet-css')\n      .appendTo('head');\n  }\n  if (!window.leafletJsLoaded) {\n    if (!window.leafletJsIsLoading) {\n      console.log('Adding js for 123b280e-4b94-40de-a0d5-b4fe2e3810ba');\n      window.leafletJsLoadedCallbacks = [createMap];\n      window.leafletJsIsLoading = true;\n      cachedScript('http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js')\n        .done(function() {\n          console.log('js loaded');\n          console.log('callbacks: ' + window.leafletJsLoadedCallbacks);\n          window.leafletJsIsLoading = false;\n          window.leafletJsLoaded = true;\n          _.each(window.leafletJsLoadedCallbacks, function(cb) { cb(); });\n          window.leafletJsLoadedCallbacks = [];\n        })\n        .fail(function() { console.log('failed'); });\n    } else {\n      console.log('Adding callback for 123b280e-4b94-40de-a0d5-b4fe2e3810ba');\n      window.leafletJsLoadedCallbacks.push(createMap);\n    }\n  } else {\n    console.log('Calling createMap directly for 123b280e-4b94-40de-a0d5-b4fe2e3810ba');\n    createMap();\n  }\n});\n</script>\n</div>","value":"#com.lemondronor.leaflet_gorilla.LeafletView{:geometries [[[35.059444 -118.151667] [34.5975 -117.383056] [33.9425 -118.408056] [34.200556 -118.358611]]], :opts {:view [[34.5975 -117.383056] 7]}}"}
;; <=

;; **
;;; If you use `:view`, you don't even need to have any geoemtries:
;; **

;; @@
(lg/leaflet :view [[34.5975 -117.383056] 7])
;; @@
;; =>
;;; {"type":"html","content":"<div>\n<div id='ad1ba76e-2bd4-4f1e-8105-d85ae37c986e' style='height: 400px; width: 400px;'></div>\n<script type='text/javascript'>\n$(function () {\n  var cachedScript = function(url, options) {\n    // Allow user to set any option except for dataType, cache, and url\n    options = $.extend( options || {}, {\n      dataType: 'script',\n      cache: true,\n      url: url\n    });\n\n    // Use $.ajax() since it is more flexible than $.getScript\n    // Return the jqXHR object so we can chain callbacks\n    return jQuery.ajax(options);\n  };\n  var createMap = function() {\n    console.log('Running createMap for ad1ba76e-2bd4-4f1e-8105-d85ae37c986e');\n    var map = L.map('ad1ba76e-2bd4-4f1e-8105-d85ae37c986e')\n    console.log('createMap ran for ad1ba76e-2bd4-4f1e-8105-d85ae37c986e');\n    L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png')\n        .addTo(map);\n    var geoJson = L.geoJson(\n      {\"features\":[]},\n      {style: {'color': 'steelblue',\n               'opacity': 1.0}});\n    geoJson.addTo(map);\n    if ([[34.5975,-117.383056],7]) {\n      map.setView.apply(map, [[34.5975,-117.383056],7]);\n    } else {\n      map.fitBounds(geoJson.getBounds());\n    }\n  };\n  if (!document.getElementById('leaflet-css')) {\n    console.log('Adding css for ad1ba76e-2bd4-4f1e-8105-d85ae37c986e');\n    $('<link>')\n      .attr('rel', 'stylesheet')\n      .attr('href', 'http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css')\n      .attr('id', 'leaflet-css')\n      .appendTo('head');\n  }\n  if (!window.leafletJsLoaded) {\n    if (!window.leafletJsIsLoading) {\n      console.log('Adding js for ad1ba76e-2bd4-4f1e-8105-d85ae37c986e');\n      window.leafletJsLoadedCallbacks = [createMap];\n      window.leafletJsIsLoading = true;\n      cachedScript('http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js')\n        .done(function() {\n          console.log('js loaded');\n          console.log('callbacks: ' + window.leafletJsLoadedCallbacks);\n          window.leafletJsIsLoading = false;\n          window.leafletJsLoaded = true;\n          _.each(window.leafletJsLoadedCallbacks, function(cb) { cb(); });\n          window.leafletJsLoadedCallbacks = [];\n        })\n        .fail(function() { console.log('failed'); });\n    } else {\n      console.log('Adding callback for ad1ba76e-2bd4-4f1e-8105-d85ae37c986e');\n      window.leafletJsLoadedCallbacks.push(createMap);\n    }\n  } else {\n    console.log('Calling createMap directly for ad1ba76e-2bd4-4f1e-8105-d85ae37c986e');\n    createMap();\n  }\n});\n</script>\n</div>","value":"#com.lemondronor.leaflet_gorilla.LeafletView{:geometries [], :opts {:view [[34.5975 -117.383056] 7]}}"}
;; <=

;; **
;;; `:color` and `:opacity` change the geometry style.  The Leaflet javascript library doesn't allow you to change point marker styles this way, so they only apply to lines and polygons.
;; **

;; @@
(lg/leaflet [:line points] :color "red" :opacity 0.2)
;; @@
;; =>
;;; {"type":"html","content":"<div>\n<div id='4c2c9552-99be-4290-99b8-8266d38ebfb7' style='height: 400px; width: 400px;'></div>\n<script type='text/javascript'>\n$(function () {\n  var cachedScript = function(url, options) {\n    // Allow user to set any option except for dataType, cache, and url\n    options = $.extend( options || {}, {\n      dataType: 'script',\n      cache: true,\n      url: url\n    });\n\n    // Use $.ajax() since it is more flexible than $.getScript\n    // Return the jqXHR object so we can chain callbacks\n    return jQuery.ajax(options);\n  };\n  var createMap = function() {\n    console.log('Running createMap for 4c2c9552-99be-4290-99b8-8266d38ebfb7');\n    var map = L.map('4c2c9552-99be-4290-99b8-8266d38ebfb7')\n    console.log('createMap ran for 4c2c9552-99be-4290-99b8-8266d38ebfb7');\n    L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png')\n        .addTo(map);\n    var geoJson = L.geoJson(\n      {\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[-118.151667,35.059444],[-117.383056,34.5975],[-118.408056,33.9425],[-118.358611,34.200556]]}}]},\n      {style: {'color': 'red',\n               'opacity': 0.2}});\n    geoJson.addTo(map);\n    if (null) {\n      map.setView.apply(map, null);\n    } else {\n      map.fitBounds(geoJson.getBounds());\n    }\n  };\n  if (!document.getElementById('leaflet-css')) {\n    console.log('Adding css for 4c2c9552-99be-4290-99b8-8266d38ebfb7');\n    $('<link>')\n      .attr('rel', 'stylesheet')\n      .attr('href', 'http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css')\n      .attr('id', 'leaflet-css')\n      .appendTo('head');\n  }\n  if (!window.leafletJsLoaded) {\n    if (!window.leafletJsIsLoading) {\n      console.log('Adding js for 4c2c9552-99be-4290-99b8-8266d38ebfb7');\n      window.leafletJsLoadedCallbacks = [createMap];\n      window.leafletJsIsLoading = true;\n      cachedScript('http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js')\n        .done(function() {\n          console.log('js loaded');\n          console.log('callbacks: ' + window.leafletJsLoadedCallbacks);\n          window.leafletJsIsLoading = false;\n          window.leafletJsLoaded = true;\n          _.each(window.leafletJsLoadedCallbacks, function(cb) { cb(); });\n          window.leafletJsLoadedCallbacks = [];\n        })\n        .fail(function() { console.log('failed'); });\n    } else {\n      console.log('Adding callback for 4c2c9552-99be-4290-99b8-8266d38ebfb7');\n      window.leafletJsLoadedCallbacks.push(createMap);\n    }\n  } else {\n    console.log('Calling createMap directly for 4c2c9552-99be-4290-99b8-8266d38ebfb7');\n    createMap();\n  }\n});\n</script>\n</div>","value":"#com.lemondronor.leaflet_gorilla.LeafletView{:geometries [[:line [[35.059444 -118.151667] [34.5975 -117.383056] [33.9425 -118.408056] [34.200556 -118.358611]]]], :opts {:opacity 0.2, :color \"red\"}}"}
;; <=

;; **
;;; `:tile-layer-url` lets you change the underlying map tiles.  By default, leaflet-gorilla uses OpenStreetMap tiles, specified by `"http://{s}.tile.osm.org/{z}/{x}/{y}.png"`.  Here's an example using the Mapquest open aerial imagery tiles:
;; **

;; @@
(lg/leaflet points :tile-layer-url "http://otile1.mqcdn.com/tiles/1.0.0/sat/{z}/{x}/{y}.png")
;; @@
;; =>
;;; {"type":"html","content":"<div>\n<div id='eb7e4447-0b09-4a13-a307-9c6c8e360568' style='height: 400px; width: 400px;'></div>\n<script type='text/javascript'>\n$(function () {\n  var cachedScript = function(url, options) {\n    // Allow user to set any option except for dataType, cache, and url\n    options = $.extend( options || {}, {\n      dataType: 'script',\n      cache: true,\n      url: url\n    });\n\n    // Use $.ajax() since it is more flexible than $.getScript\n    // Return the jqXHR object so we can chain callbacks\n    return jQuery.ajax(options);\n  };\n  var createMap = function() {\n    console.log('Running createMap for eb7e4447-0b09-4a13-a307-9c6c8e360568');\n    var map = L.map('eb7e4447-0b09-4a13-a307-9c6c8e360568')\n    console.log('createMap ran for eb7e4447-0b09-4a13-a307-9c6c8e360568');\n    L.tileLayer('http://otile1.mqcdn.com/tiles/1.0.0/sat/{z}/{x}/{y}.png')\n        .addTo(map);\n    var geoJson = L.geoJson(\n      {\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPoint\",\"coordinates\":[[-118.151667,35.059444],[-117.383056,34.5975],[-118.408056,33.9425],[-118.358611,34.200556]]}}]},\n      {style: {'color': 'steelblue',\n               'opacity': 1.0}});\n    geoJson.addTo(map);\n    if (null) {\n      map.setView.apply(map, null);\n    } else {\n      map.fitBounds(geoJson.getBounds());\n    }\n  };\n  if (!document.getElementById('leaflet-css')) {\n    console.log('Adding css for eb7e4447-0b09-4a13-a307-9c6c8e360568');\n    $('<link>')\n      .attr('rel', 'stylesheet')\n      .attr('href', 'http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css')\n      .attr('id', 'leaflet-css')\n      .appendTo('head');\n  }\n  if (!window.leafletJsLoaded) {\n    if (!window.leafletJsIsLoading) {\n      console.log('Adding js for eb7e4447-0b09-4a13-a307-9c6c8e360568');\n      window.leafletJsLoadedCallbacks = [createMap];\n      window.leafletJsIsLoading = true;\n      cachedScript('http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js')\n        .done(function() {\n          console.log('js loaded');\n          console.log('callbacks: ' + window.leafletJsLoadedCallbacks);\n          window.leafletJsIsLoading = false;\n          window.leafletJsLoaded = true;\n          _.each(window.leafletJsLoadedCallbacks, function(cb) { cb(); });\n          window.leafletJsLoadedCallbacks = [];\n        })\n        .fail(function() { console.log('failed'); });\n    } else {\n      console.log('Adding callback for eb7e4447-0b09-4a13-a307-9c6c8e360568');\n      window.leafletJsLoadedCallbacks.push(createMap);\n    }\n  } else {\n    console.log('Calling createMap directly for eb7e4447-0b09-4a13-a307-9c6c8e360568');\n    createMap();\n  }\n});\n</script>\n</div>","value":"#com.lemondronor.leaflet_gorilla.LeafletView{:geometries [[[35.059444 -118.151667] [34.5975 -117.383056] [33.9425 -118.408056] [34.200556 -118.358611]]], :opts {:tile-layer-url \"http://otile1.mqcdn.com/tiles/1.0.0/sat/{z}/{x}/{y}.png\"}}"}
;; <=

;; **
;;; [Mapbox](http://mapbox.com/) is a service that offers the ability to create custom map styles and generate your own tile layers.
;; **

;; @@

;; @@
